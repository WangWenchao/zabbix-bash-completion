#
#  Bash completion for zabbix_server
#

# syntax like --param=value or -pvalue is not supported at this time
# relies on 'ip' and 'awk'

shopt -s extglob

_zabbix_server()
{
	local cur prev opts unique_opts nonunique_opts unique_opts_space nonunique_opts_space opt option
	local runtime_options config_supplied config_path pid_file parent_pid
	COMPREPLY=()
	_get_comp_words_by_ref -n = cur prev

	unique_opts="-h|--help|-V|--version"
	nonunique_opts="-c|-R|--config|--runtime-control"
	unique_opts_space=${unique_opts//|/ }
	nonunique_opts_space=${nonunique_opts//|/ }
	runtime_simple_options="config_cache_reload housekeeper_execute"
	runtime_loglevel_options="log_level_increase log_level_decrease"
	runtime_options="$runtime_simple_options $runtime_loglevel_options"
	runtime_processes=( alerter "configuration\ syncer" "db\ watchdog" discoverer escalator "history\ syncer" housekeeper "http\ poller" "icmp\ pinger" "ipmi\ poller" "java\ poller" poller "proxy\ poller" self-monitoring timer trapper "unreachable\ poller" "vmware\ collector" )

	opts=" $unique_opts_space $nonunique_opts_space "
	for (( i=1; i<=${#COMP_WORDS[@]-1}; ++i )) ; do
		opt=${COMP_WORDS[$i]}
		[[ $config_supplied ]] && {
			config_path=$opt
			unset config_supplied
			continue
		}
		[[ $opt =~ --*[hvVcRr].* ]] && {
			option=$opt
		} || {
			continue
		}
		# if a unique option has been supplied, do not offer any other options
		[[ $option == @($unique_opts) ]] && {
			return 1
		}
		# if a non-unique option has been supplied, remove all unique options and already used options
		[[ $option == @($nonunique_opts) ]] && opts="${opts/$unique_opts_space/}"
		opts=${opts/ $option / }

		[[ $option == "-c" ]] && {
			config_supplied=yes
		}

		# remove alternatives
		case $option in
			-R)                opts="${opts/ --runtime-control/}" ;;
			--runtime-control) opts="${opts/ -R/}" ;;
			-c)                opts="${opts/ --config/}" ;;
			--config)          opts="${opts/ -c/}" ;;
		esac
	done
	case "${prev}" in
		-@(c|-config))
			compopt -o default
			COMPREPLY=()
			return 0
			;;
		-@(R|-runtime-control))
			if [[ ${cur} =~ = ]]; then
				if [[ ${cur} =~ [a-z]$ ]]; then
					# no need to parse pids anymore, process name should be completed instead
					# there does not seem to be a way to pass an array
					#  (or any other way to pass parameters with spaces) to compgen
					current_loglevel_option=${cur%=*}
					runtime_proc_count=${#runtime_processes[@]}
					for ((i=0; $i<=$runtime_proc_count; i++)); do
						[[ ${runtime_processes[i]} = ${cur#$current_loglevel_option=}* ]] || {
							unset runtime_processes[i]
						}
					done
					# this could be continued by process number, so do not add space
					# should be extended to offer actual process count numbers
					compopt -o nospace
					COMPREPLY=( "${runtime_processes[@]}" )
					return 0
				fi
				# if -c is passed, we grab the child pids for the pid from the pidfile. Include directive is not supported
				# if -c is not yet passed, we should find out the default config file path for the used binary, but that is not possible yet
				[[ -f "$config_path" ]] && {
					pid_file=$(awk -F= '/^ *PidFile/ {pidfile=$2} END{print pidfile}' "$config_path")
					[[ -f $pid_file ]] && {
						parent_pid=$(cat "$pid_file")
					}
				}

				[[ $parent_pid ]] && {
					# currently log level changing is not supported for the main process
					# $pids should include $parent_pid once that is fixed
					pids=$(ps --ppid $parent_pid -o pid=)
				} || {
					# if the parent pid was not found, fall back to all processes by name
					# for example, config file might be unreadable for the current user when using sudo
					pids=$(ps -C bash -o pid=)
				}
				[[ ${cur} =~ =$ ]] && {
					COMPREPLY=( $(compgen -W "${pids}" -- ${cur#*=}) "${runtime_processes[@]}" )
				} || {
					COMPREPLY=( $(compgen -W "${pids}" -- ${cur#*=}) )
				}
				return 0
			fi
			COMPREPLY=( $(compgen -W "${runtime_options}" -- ${cur}) )
			if [[ $runtime_loglevel_options =~ ${COMPREPLY[@]} ]]; then
				compopt -o nospace
				if [[ ${#COMPREPLY[@]} = 1 ]]; then
					# only one of increase/decrease left in the return array
					# quite hackish
					COMPREPLY=( ${COMPREPLY[0]} ${COMPREPLY[0]}= )
				fi
			fi
			return 0
			;;
		*)
			;;
	esac

	COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
}
complete -F _zabbix_server zabbix_server
